numIn(input){
    output = null;
    for elem in input{
        if(typeof(elem) == "unit"){
            output = elem;
        }
    }
    return output
}

reverse(list){
    reversed = ()
    unshift(reversed, value) for value in list

    return reversed
}

oneIn(list1,list2){
    for i in list1 {
        if(i in list2){
            return true;
        }
    }
    return false;
}

column-space(mode,properties,index){
    base-size = numIn(properties);
    if(oneIn(left right space-around, properties)){
        if(oneIn(left space-around, properties)){
            {mode}-left: base-size;
        }
        if(oneIn(right space-around, properties)){
            {mode}-right: base-size;
        }
    }
    else{
        if(index == 1){
            if(equal in properties){
                {mode}-left: base-size;
            }
            {mode}-right: (base-size/2);
        }
        else if(index == cycle){
            if(equal in properties){
                {mode}-right: base-size;
            }
            {mode}-left: (base-size/2);
        }
        else{
            {mode}-left: (base-size/2);
            {mode}-right: (base-size/2);
        }
    }
}

column-margin(properties,index){
    column-space("margin",properties,index)
}

column-padding(properties,index){
    column-space("padding",properties,index)
}

boxes-margin(size = 20px, template=space-around){
    if(template in (space-around equal)){
        margin-left: size;
        margin-right: size;
    }
    if(template in (space-between equal)){
        if(target == "*"){
            &:not(:first-child){
                margin-left: (size/2);
            }
            &:not(:last-child){
                margin-right: (size/2);
            }
        }
        else{
            &:not(:first-of-type){
                margin-left: (size/2);
            }
            &:not(:last-of-type){
                margin-right: (size/2);
            }
        }
    }
}

local-margin(properties,index){
    base-size = numIn(properties);
    if((index == 1 || index == cycle) && oneIn(equal space-between, properties)){
        if(equal in properties){
            return 1.5*base-size;
        }
        else{
            return .5*base-size;
        }

    }
    else{
        if(oneIn(equal space-between left right, properties)){
            return base-size;
        }
        else{
            return 2*base-size;
        }
    }
}